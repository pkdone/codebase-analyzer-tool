<% if (codeQualitySummary) { %>
<p class="note-paragraph">
  This section provides code quality metrics to help identify complex, hard-to-maintain code.
  Metrics are estimated by AI and should be verified manually.
</p>

<h3>Overall Statistics</h3>
<table>
  <thead>
    <tr>
      <th class="col-medium">Metric</th>
      <th class="col-small numeric">Value</th>
      <th class="col-description">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Total Methods Analyzed</td>
      <td class="numeric"><%= codeQualitySummary.overallStatistics.totalMethods %></td>
      <td>Total number of methods analyzed across the codebase</td>
    </tr>
    <tr>
      <td>Average Complexity</td>
      <td class="numeric"><%= codeQualitySummary.overallStatistics.averageComplexity %></td>
      <td>Average cyclomatic complexity (1-10: simple, 11-20: moderate, >20: complex)</td>
    </tr>
    <tr>
      <td>High Complexity Methods</td>
      <td class="numeric"><%= codeQualitySummary.overallStatistics.highComplexityCount %></td>
      <td>Methods with complexity > 10 (candidate for refactoring)</td>
    </tr>
    <tr>
      <td>Very High Complexity</td>
      <td class="numeric"><%= codeQualitySummary.overallStatistics.veryHighComplexityCount %></td>
      <td>Methods with complexity > 20 (high priority for refactoring)</td>
    </tr>
    <tr>
      <td>Average Method Length</td>
      <td class="numeric"><%= codeQualitySummary.overallStatistics.averageMethodLength %> LOC</td>
      <td>Average lines of code per method</td>
    </tr>
    <tr>
      <td>Long Methods</td>
      <td class="numeric"><%= codeQualitySummary.overallStatistics.longMethodCount %></td>
      <td>Methods with > 50 lines of code</td>
    </tr>
  </tbody>
</table>

<h3>Top 10 Most Complex Methods</h3>
<p>These methods have the highest cyclomatic complexity and should be prioritized for refactoring.</p>
<table>
  <thead>
    <tr>
      <th class="col-wide">Method Name</th>
      <th class="col-medium">File Path</th>
      <th class="col-small numeric">Complexity</th>
      <th class="col-small numeric">Lines</th>
      <th class="col-description">Code Smells</th>
    </tr>
  </thead>
  <tbody>
    <% codeQualitySummary.topComplexMethods.forEach(method => { %>
    <tr>
      <td><code><%= method.methodName %></code></td>
      <td><code><%= method.filePath %></code></td>
      <td class="numeric"><%= method.complexity %></td>
      <td class="numeric"><%= method.linesOfCode %></td>
      <td>
        <% if (method.codeSmells && method.codeSmells.length > 0) { %>
          <ul>
            <% method.codeSmells.forEach(smell => { %>
              <li><%= smell %></li>
            <% }); %>
          </ul>
        <% } else { %>
          None detected
        <% } %>
      </td>
    </tr>
    <% }); %>
  </tbody>
</table>

<h3>Most Common Code Smells</h3>
<p>Frequently occurring code quality issues across the codebase.</p>
<table>
  <thead>
    <tr>
      <th class="col-wide">Code Smell Type</th>
      <th class="col-small numeric">Occurrences</th>
      <th class="col-small numeric">Affected Files</th>
      <th class="col-description">Recommendation</th>
    </tr>
  </thead>
  <tbody>
    <% codeQualitySummary.commonCodeSmells.slice(0, 15).forEach(smell => { %>
    <tr>
      <td><strong><%= smell.smellType %></strong></td>
      <td class="numeric"><%= smell.occurrences %></td>
      <td class="numeric"><%= smell.affectedFiles %></td>
      <td>
        <% if (smell.smellType.includes('Long Method')) { %>
          Refactor into smaller, single-purpose methods
        <% } else if (smell.smellType.includes('God Class')) { %>
          Split into multiple classes following Single Responsibility Principle
        <% } else if (smell.smellType.includes('Duplicate Code')) { %>
          Extract common code into reusable functions or utilities
        <% } else if (smell.smellType.includes('Long Parameter List')) { %>
          Use parameter objects or builder pattern
        <% } else if (smell.smellType.includes('Complex Conditional')) { %>
          Simplify conditionals or extract into guard clauses
        <% } else { %>
          Review and refactor as part of modernization effort
        <% } %>
      </td>
    </tr>
    <% }); %>
  </tbody>
</table>
<% } else { %>
<p class="note-paragraph">
  Code quality metrics are not available. Run the insights generation step to analyze code quality.
</p>
<% } %>


